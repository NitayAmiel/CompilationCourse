@.intFormat = internal constant [4 x i8] c"%d\0A\00"
@.odd_str = internal constant [5 x i8] c"odd\0A\00"
@.even_str = internal constant [6 x i8] c"even\0A\00"
declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier_scan = constant [3 x i8] c"%d\00"
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"



define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define i32 @main() {
    %odd_str = getelementptr [5 x i8], [5 x i8]* @.odd_str, i32 0, i32 0
    %even_str = getelementptr [6 x i8], [6 x i8]* @.even_str, i32 0, i32 0
    
    ; TODO: change the value of num to see results
    %num = add i32 6, 0
    %parity = srem i32 %num, 2
    %is_even = icmp eq i32 %parity, 0
    %x = alloca i32
    store i32 10 , i32* %x
    %t0 = add i32 1, 4
    %t1 = load i32 , i32* %x
    %t2 = add i32 %t0, %t1
    %result = alloca i32
    store i32 %t2 , i32* %result
    %t8 = load i32 , i32* %result

    call void (i32) @printi(i32 %t8)
    br i1 %is_even, label %even_label, label %odd_label

    even_label:
        br label %print_result
    odd_label:
        br label %print_result
    print_result:
        %to_print = phi i8* [%even_str, %even_label], [%odd_str, %odd_label]
        call i32 (i8*, ...) @printf(i8* %to_print)
        ret i32 0
}


